#include "WindowEditor.h"
#include "imgui.h"
#include "imgui_impl_sdl2.h"
#include "imgui_impl_opengl3.h"
#include "MyWindow.h"
#include <SDL2/SDL.h>
#include <GL/glew.h>
#include <string>
#include <stdexcept>

WindowEditor::WindowEditor() : _window(nullptr), _ctx(nullptr) {}

WindowEditor::~WindowEditor()
{
    Shutdown();
}

void WindowEditor::Create()
{
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_TIMER | SDL_INIT_GAMECONTROLLER) != 0) {
        throw std::runtime_error(std::string("SDL could not initialize! SDL_Error: ") + SDL_GetError());
    }

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();

    // SDL OpenGL 设置
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);

    // 创建窗口
    _window = SDL_CreateWindow("Solari", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);
    if (!_window) {
        throw std::runtime_error(std::string("Window could not be created! SDL_Error: ") + SDL_GetError());
    }

    // 创建OpenGL上下文
    _ctx = SDL_GL_CreateContext(_window);
    if (!_ctx) {
        SDL_DestroyWindow(_window);
        throw std::runtime_error("OpenGL context could not be created!");
    }

    // 初始化GLEW
    glewExperimental = GL_TRUE;
    if (glewInit() != GLEW_OK) {
        Shutdown();
        throw std::runtime_error("Failed to initialize GLEW!");
    }

    // 设置交换间隔，启用垂直同步
    if (SDL_GL_SetSwapInterval(1) != 0) {
        Shutdown();
        throw std::runtime_error("Unable to set VSync!");
    }

    // 初始化ImGui SDL和OpenGL绑定
    ImGui_ImplSDL2_InitForOpenGL(_window, _ctx);
    ImGui_ImplOpenGL3_Init("#version 130");

    // 设置窗口最小尺寸
    SDL_SetWindowMinimumSize(_window, 200, 200);
}

void WindowEditor::Shutdown()
{
    if (_window) {
        ImGui_ImplOpenGL3_Shutdown();
        ImGui_ImplSDL2_Shutdown();
        ImGui::DestroyContext();
        SDL_GL_DeleteContext(_ctx);
        SDL_DestroyWindow(_window);
        SDL_Quit();
        _window = nullptr;
        _ctx = nullptr;
    }
}

void WindowEditor::HandleSDLEvent(SDL_Event& e)
{
    ImGui_ImplSDL2_ProcessEvent(&e);

    // 处理SDL退出事件
    if (e.type == SDL_QUIT) {
        _shouldClose = true;
    }
}

void WindowEditor::BeginRender()
{
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplSDL2_NewFrame();
    ImGui::NewFrame();
}

void WindowEditor::Render()
{
    if (!PumpEvents()) {
        _shouldClose = true;
        return;
    }
    BeginRender();
    ImGui::ShowDemoWindow();
    EndRender();
}

bool WindowEditor::PumpEvents()
{
    SDL_Event e;
    while (SDL_PollEvent(&e)) {
        HandleSDLEvent(e);
    }
    return !_shouldClose;
}

void WindowEditor::EndRender()
{
    ImGui::Render();
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
    SDL_GL_SwapWindow(_window);
}
